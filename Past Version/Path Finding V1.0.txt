#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <vector>
#include <utility>
using namespace std;

//COLOR DEFINIITION
#define RESET   "\033[0m"
#define RED     "\033[31m"
#define GREEN   "\033[32m"
#define YELLOW  "\033[33m"
#define BLUE    "\033[34m"
#define MAGENTA "\033[35m"
#define CYAN    "\033[36m"
#define WHITE   "\033[37m"

//TEXT STYLE
#define BOLD            "\033[1m"
#define ITALIC          "\033[3m"
#define UNDERLINE       "\033[4m"
#define STRIKETHROUGH   "\033[9m"

//CURSOR MOVEMENT
#define MOVE_CURSOR(row, col) "\033[" #row ";" #col "H"     // Move the cursor to a specific position (row, col)
#define CLEAR_SCREEN "\033[2J"                              // Clear the screen
#define CLEAR_TO_END "\033[0J"                              // Clear from cursor to end of screen
#define SAVE_CURSOR "\033[s"                                // Save the current cursor position
#define RESTORE_CURSOR "\033[u"                             // Restore the saved cursor position
#define HIDE_CURSOR "\033[?25l"                             // Hide the cursor
#define SHOW_CURSOR "\033[?25h"                             // Show the cursor

//MAP
const string OriginalMap[10] = {
"S, , ,X, , , , , , ",
" ,X, ,X, ,X, , , , ",
" , , , , , ,X, , , ",
" , , , , , , , , , ",
"X,X, ,X, ,X, ,X, , ",
" , , , , , , , , , ",
"X,X,X,X,X, , , , , ",
" , , , , , , , , , ",
" ,E, , , ,X,X,X,X,X",
" , , , , , , , , , "
};

class map
{   
    private:
    int positionX,positionY;
    string filename = "map.csv";
    string DynamicMap[10][10] = {
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "," "," "}
    };

    public:
    void print(){
            cout<< ITALIC << "    0 1 2 3 4 5 6 7 8 9" << RESET << endl;
            cout<<"  ┌─────────────────────┐"<<endl;
            for(int i=0;i<10;i++){
                cout<<ITALIC<<i<<RESET<<" │ ";
                for(int j=0;j<10;j++){
                    string cell = DynamicMap[i][j];
                    if(cell=="S"||cell=="E"){
                        cout << BOLD << GREEN << cell << RESET << RESET << " ";
                    } else if (cell=="X"){
                        cout << BOLD << RED << cell << RESET << RESET << " ";
                    } else if((i==1||i==2||i==12)&& j==0){
                        cout << cell << " ";
                    } else {
                        cout << cell << " ";
                    }
                }
                cout<<"│"<<endl;
            }
            cout<<"  └─────────────────────┘"<<endl;
    }

    void installMap(){
        ofstream outfile(filename,ios::out);
        string line;
        for(int i=0;i<10;i++){
            if(i<9){
                outfile << OriginalMap[i] << endl;
            } else {
                outfile << OriginalMap[i];
            }
        }
        outfile.close();
        ifstream infile(filename);
        string row;
        if(infile.is_open()){
            string line;
            stringstream ss;
            int lineCount = 0;
            while(getline(infile,line)){
                if(lineCount<10){
                    string cell;
                    int column = 0;
                    ss.clear();
                    ss.str(line);
                    while(getline(ss,cell,',')){
                        if(column<10){
                            DynamicMap[lineCount][column] = cell;
                            column++;
                        }
                    }
                    lineCount++;
                }
            }
        }
    }

    void giveCoordinate(string Target){
        for(int i = 0;i<10;i++){
            for(int j = 0;j<10;j++){
                if(DynamicMap[i][j]==Target){
                    positionX=j;
                    positionY=i;    
                    return;
                }
            }
        }
    }

    bool movingLogic(string direction){
        if(direction=="Up"){
            if(DynamicMap[positionY-1][positionX]=="X"){return false;
            } else {return true;}}
        else if(direction=="UpperLeft"){
            if(DynamicMap[positionY-1][positionX-1]=="X"){return false;
            } else {return true;}}
        else if(direction=="UpperRight"){
            if(DynamicMap[positionY-1][positionX+1]=="X"){return false;
            } else {return true;}}
        else if(direction=="Left"){
            if(DynamicMap[positionY][positionX-1]=="X"){return false;
            } else {return true;}}
        else if(direction=="Right"){
            if(DynamicMap[positionY][positionX+1]=="X"){return false;
            } else {return true;}}
        else if(direction=="Lower"){
            if(DynamicMap[positionY+1][positionX]=="X"){return false;
            } else {return true;}}
        else if(direction=="LowerLeft"){
            if(DynamicMap[positionY+1][positionX-1]=="X"){return false;
            } else {return true;}}
        else if(direction=="LowerRight"){
            if(DynamicMap[positionY+1][positionX+1]=="X"){return false;
            } else {return true;}}
        else { return false; }
    }
    
    bool withinMatrix(){
        if(positionX>=0 && positionY>=0 && positionX<10 && positionY<10){
            return true;
        } else {
            return false;
        }
    }

    string InttoStrForDirection(int directionInt){
        string direction;
        switch(directionInt){
            case 1:
            direction = "LowerLeft";
            break;
            case 2:
            direction = "Lower";
            break;
            case 3:
            direction = "LowerRight";
            break;
            case 4:
            direction = "Left";
            break;
            case 6:
            direction = "Right";
            break;
            case 7:
            direction = "UpperLeft";
            break;
            case 8:
            direction = "Up";
            break;
            case 9:
            direction = "UpperRight";
            break;
            default:
            direction = "None";
        }
        return direction;
    }

    void control(int directionInt){
        string direction = InttoStrForDirection(directionInt);
        giveCoordinate("E");
        if(direction=="Up"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY-1][positionX]);
                    positionY--;
                }
            }
            print();
        } else if (direction=="UpperLeft"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY-1][positionX-1]);
                    positionY--;
                    positionX--;
                }
            }
            print();
        } else if (direction=="UpperRight"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY-1][positionX+1]);
                    positionY--;
                    positionX++;
                }
            }
            print();
        } else if (direction=="Left"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY][positionX-1]);
                    positionX--;
                }
            }
            print();
        } else if (direction=="Right"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY][positionX+1]);
                    positionX++;
                }
            }
            print();
        } else if (direction=="Lower"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY+1][positionX]);
                    positionY++;
                }
            }
            print();
        } else if (direction=="LowerLeft"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY+1][positionX-1]);
                    positionY++;
                    positionX--;
                }
            }
            print();
        } else if (direction=="LowerRight"){
            if(withinMatrix() && movingLogic(direction)){
                for(int i=0;i<1;i++){
                    swap(DynamicMap[positionY][positionX],DynamicMap[positionY+1][positionX+1]);
                    positionY++;
                    positionX++;
                }
            }
            print();
        }
    }

};

int main(){
    map map;
    int StartInput;
    int MovementControl;
    bool ContinueManualMode = true;
    cout << CLEAR_SCREEN <<MOVE_CURSOR(0,0);
    cout<<"WHAT CAN BROWN DO FOR YOU?"<<endl;
    map.print();
    cout<<"Click 1 to Start (Manual Control)> ";
    cin>>StartInput;

    if(StartInput==1){
        map.installMap();
        cout << CLEAR_SCREEN <<MOVE_CURSOR(1,0);
        cout<<"WHAT CAN BROWN DO FOR YOU? (MANUAL MODE)"<<endl;
        map.print();
        do{
            cout<<"Enter The Next Movement > ";
            cin>>MovementControl;
            if(MovementControl==0){
                break;
            } else if(!map.withinMatrix()){
                break;
            }
            cout << CLEAR_SCREEN <<MOVE_CURSOR(0,0);
            cout<<"WHAT CAN BROWN DO FOR YOU? (MANUAL MODE)"<<endl;
            map.control(MovementControl);
        }while(ContinueManualMode);
    } else {
        return 0;
    }
}